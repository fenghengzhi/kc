
/*# sourceMappingURL=data:application/json;charset=utf8;base64,{"version":3,"names":[],"mappings":"","sources":["common/src/less/define.less"],"sourcesContent":["@primary: #5f8bc9;\r\n@primary02: #779cd1;\r\n\r\n@btn01: #ebae32;\r\n@btn02: #eebd5a;\r\n@btn03: #afc5e4;\r\n@btn04: #cfdcef;\r\n@orange: #fd7d00;\r\n@footer02: #313131;\r\n@footer01: #3f3f3f;\r\n\r\n@font01: #333333;\r\n@font02: #666666;\r\n@font03: #999999;\r\n\r\n@bg01: #eeeeee;\r\n@bg02: #f5f5f5;\r\n@bg03: #f0f0fa;\r\n@bg04: #b2b5ba;\r\n@bg05: #a1b3ce;\r\n@bg06: #d8c89c;\r\n\r\n@line01: #dddddd;\r\n@line02: #cccccc;\r\n\r\n@nav-main-width: 1200px;\r\n@main-width: 1024px;\r\n\r\n.common(){\r\n  * {\r\n    line-height: 1;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  &{\r\n    background: #eee;\r\n  }\r\n  #content{\r\n    background: #fff;\r\n    max-width: 1400px;\r\n    margin: auto;\r\n  }\r\n\r\n  .header {\r\n\r\n    .header-part1 {\r\n      width: 100%;\r\n      height: 60px;\r\n      //align-items: center;\r\n      line-height: 60px;\r\n      box-shadow: 0px 0px 10px #ddd;\r\n\r\n      .header-part1-con{\r\n        max-width: @nav-main-width;\r\n        margin: auto;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        height: 60px;\r\n        ul {\r\n          display: flex;\r\n          li {\r\n            &:hover{\r\n              a{\r\n                color: @primary;\r\n              }\r\n            }\r\n            line-height: 60px;\r\n            margin-right: 16px;\r\n            a {\r\n              color: @font03;\r\n              font-size: 14px;\r\n            }\r\n          }\r\n          .selected{\r\n            a{\r\n              font-weight: bold;\r\n            }\r\n          }\r\n        }\r\n        .login {\r\n          span {\r\n            line-height: 60px;\r\n            margin-left: 22px;\r\n            font-size: 14px;\r\n            a {\r\n              &:hover{\r\n                color: @primary;\r\n              }\r\n              color: @font03;\r\n              font-size: 14px;\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n\r\n    }\r\n    .header-part2 {\r\n      width: @nav-main-width;\r\n      margin: auto;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      height: 88px;\r\n      line-height: 88px;\r\n      align-items: center;\r\n      .logo {\r\n        line-height: 88px;\r\n        height: 50px;\r\n        width: auto;\r\n        a{\r\n          display: block;\r\n        }\r\n      }\r\n      ul {\r\n        display: flex;\r\n        li {\r\n          &:hover{\r\n              a{\r\n                color: @primary;\r\n              }\r\n            }\r\n\r\n          line-height: 88px;\r\n          margin-left: 16px;\r\n          a {\r\n            color: @font02;\r\n            font-size: 14px;\r\n          }\r\n        }\r\n        .selected {\r\n          a {\r\n            color: @primary;\r\n            border-bottom: 3px solid @primary;\r\n            font-weight: bold;\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n    .header-part3 {\r\n      height: 118px;\r\n      background-color: @primary;\r\n          \r\n      p {\r\n        font-size: 40px;\r\n        //line-height: 118px;\r\n        position:relative;\r\n        top:50%;\r\n        //padding-top:50%;\r\n        transform:translateY(-50%);\r\n        color: #fff;\r\n        font-weight: bold;\r\n        text-align: center;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  .main{\r\n    width: @main-width;\r\n    margin: auto;\r\n  }\r\n\r\n  .footer {\r\n    color: #fff;\r\n    a {\r\n      color: #fff;\r\n    }\r\n    .footer-top-bg {\r\n      height: 314px;\r\n      background: #2b2e3c;\r\n    }\r\n    .footer-bottom-bg {\r\n      height: 40px;\r\n      background: #262634;\r\n    }\r\n    .footer-top {\r\n      padding-top: 56px;\r\n      width: @nav-main-width;\r\n      margin: auto;\r\n\r\n      .footer-top-info {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        .footer-top-info1 {\r\n          .footer-title {\r\n            font-size: 18px;\r\n            font-weight: bold;\r\n            margin-bottom: 10px;\r\n          }\r\n          p {\r\n            margin-bottom: 14px;\r\n          }\r\n        }\r\n        .footer-top-info2 {\r\n          display: flex;\r\n          .footer-rq {\r\n            border-right: 2px solid #646464;\r\n            display: flex;\r\n            padding-right: 13px;\r\n            margin-right: 30px;\r\n            div {\r\n              width: 106px;\r\n              text-align: center;\r\n              img {\r\n                width: 100px;\r\n                height: 114px;\r\n                background: #fff;\r\n              }\r\n            }\r\n\r\n          }\r\n          .footer-links {\r\n            display: flex;\r\n            ul {\r\n              &:nth-of-type(1) {\r\n                margin-right: 52px;\r\n              }\r\n              li {\r\n                margin-bottom: 14px;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      .footer-top-otherslinks {\r\n        padding-top: 56px;\r\n\r\n        .footer-otherslinks-title {\r\n          ul {\r\n            display: flex;\r\n            li {\r\n              position: relative;\r\n              z-index: 2;\r\n              margin-right: 24px;\r\n              margin-bottom: 10px;\r\n              cursor: pointer;\r\n              padding-bottom: 10px;\r\n            }\r\n            .selected {\r\n              border-bottom: 3px solid #fff;\r\n            }\r\n          }\r\n        }\r\n        .footer-otherslinks-line {\r\n          position: relative;\r\n          top: -13px;\r\n          height: 3px;\r\n          width: 100%;\r\n          background: #787878;\r\n        }\r\n        .footer-otherslinks-links {\r\n          width: @nav-main-width;\r\n          ul {\r\n            width: @nav-main-width;\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            li {\r\n              margin: 0 18px 14px 0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n    .footer-bottom{\r\n      width: @nav-main-width;\r\n      margin: auto;\r\n      line-height: 40px;\r\n      color: #999b98;\r\n      font-size: 15px;\r\n    }\r\n  }\r\n}\r\n\r\n.common-title(){\r\n  border-left: 3px solid @primary;\r\n  display: block;\r\n  padding-left: 10px;\r\n  font-size: 16px;\r\n  color: @font02;\r\n}\r\n\r\n\r\n.filter(){\r\n  .clearfix:before,\r\n  .clearfix:after{\r\n    content:\"\";\r\n    display:table;\r\n    clear:both;\r\n  }\r\n  .hov{\r\n    color: @primary;\r\n  }\r\n\r\n\r\n  .filter {\r\n    width: 100%;\r\n    padding: 16px 0;\r\n    background-color: @bg02;\r\n    clear: both;\r\n    a{\r\n      color:@font02;\r\n    }\r\n    .specie {\r\n      width: @main-width;\r\n      margin: 0 auto;\r\n      .server{\r\n        padding-bottom:24px;\r\n      }\r\n      .field{\r\n        margin-bottom:24px;\r\n        position: relative;\r\n      }\r\n      .profes{\r\n        padding-bottom:16px;\r\n        position: relative;\r\n      }\r\n      span {\r\n        float: left;\r\n        font-size: 14px;\r\n        color: #666666;\r\n        margin-right:30px;\r\n      }\r\n      ul {\r\n        float: left;\r\n        li {\r\n          &:hover{\r\n            color:@primary02;\r\n          }\r\n          float: left;\r\n          font-size: 14px;\r\n          border-left:1px solid @line02;\r\n          padding-left:16px;\r\n          padding-right:16px;\r\n          cursor:pointer;\r\n          i {\r\n            font-style:normal;\r\n            font-size: 14px;\r\n            color: @primary;\r\n            display: inline-block;\r\n          }\r\n        }\r\n      }\r\n      .more{\r\n        display:none;\r\n      }\r\n      .more1{\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.maincard(){\r\n  width: calc(~\"(100% - 56px)/3\");\r\n  margin-right: 28px;\r\n  cursor: pointer;\r\n  margin-bottom: 24px;\r\n  &:nth-of-type(3n){\r\n    margin-right: 0;\r\n  }\r\n\r\n  .card-title{\r\n    font-size: 16px;\r\n    color: @font02;\r\n    margin-bottom: 40px;\r\n    padding: 16px 16px 0;\r\n    font-weight: bold;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n  }\r\n  .card-info1{\r\n    display: flex;\r\n    padding: 0 16px 12px;\r\n    justify-content: space-between;\r\n    font-size: 14px;\r\n    color: @font02;\r\n    border-bottom: 1px dashed @line01;\r\n  }\r\n  .card-info2{\r\n    margin-top: 24px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    div{\r\n      text-align: center;\r\n      p{\r\n        margin-bottom: 16px;\r\n        font-size: 14px;\r\n        span{\r\n          font-size: 18px;\r\n          color: @orange;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .card-want{\r\n    height: 32px;\r\n    line-height: 32px;\r\n    color: #fff;\r\n    font-size: 14px;\r\n    background: @primary;\r\n    text-align: center;\r\n    &:hover{\r\n      background: @primary02;\r\n    }\r\n  }\r\n}\r\n"],"file":"common/src/less/define.css","sourceRoot":"/kc"} */
